# Production-optimized Dockerfile for VIBES DeFi Server Deployment
FROM node:20-alpine AS base

# Install curl for health checks and other utilities
RUN apk add --no-cache curl dumb-init

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Install build dependencies for native modules (including Linux headers for USB support)
RUN apk add --no-cache libc6-compat python3 make g++ linux-headers eudev-dev

# Copy package files
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Install build dependencies for native modules (including Linux headers for USB support)
RUN apk add --no-cache libc6-compat python3 make g++ linux-headers eudev-dev

# Copy dependencies and source code
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Set production environment for build
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Accept build arguments for environment variables - UPDATED WITH CORRECT VALUES
ARG NEXT_PUBLIC_SOLANA_NETWORK
ARG NEXT_PUBLIC_HELIUS_API_KEY
ARG NEXT_PUBLIC_HELIUS_RPC_ENDPOINT
ARG NEXT_PUBLIC_RPC_ENDPOINT
ARG NEXT_PUBLIC_VIBES_MINT
ARG NEXT_PUBLIC_VIBES_DECIMALS
ARG NEXT_PUBLIC_USDC_MINT
ARG NEXT_PUBLIC_PRESALE_PROGRAM_ID
ARG NEXT_PUBLIC_STAKING_PROGRAM_ID
ARG NEXT_PUBLIC_VESTING_PROGRAM_ID
ARG NEXT_PUBLIC_DEMO_MODE
ARG NEXT_PUBLIC_APP_ENV
ARG NEXT_PUBLIC_PRESALE_START_TIME
ARG NEXT_PUBLIC_PRESALE_END_TIME
ARG NEXT_PUBLIC_PRESALE_HARD_CAP
ARG NEXT_PUBLIC_MAX_PURCHASE_PER_WALLET
ARG NEXT_PUBLIC_MIN_SOL_PURCHASE
ARG NEXT_PUBLIC_FEE_RATE_BPS
ARG NEXT_PUBLIC_PRESALE_STATE_PDA
ARG NEXT_PUBLIC_TEST_WALLET_ADDRESS

# Set environment variables from build arguments
ENV NEXT_PUBLIC_SOLANA_NETWORK=$NEXT_PUBLIC_SOLANA_NETWORK
ENV NEXT_PUBLIC_HELIUS_API_KEY=$NEXT_PUBLIC_HELIUS_API_KEY
ENV NEXT_PUBLIC_HELIUS_RPC_ENDPOINT=$NEXT_PUBLIC_HELIUS_RPC_ENDPOINT
ENV NEXT_PUBLIC_RPC_ENDPOINT=$NEXT_PUBLIC_RPC_ENDPOINT
ENV NEXT_PUBLIC_VIBES_MINT=$NEXT_PUBLIC_VIBES_MINT
ENV NEXT_PUBLIC_VIBES_DECIMALS=$NEXT_PUBLIC_VIBES_DECIMALS
ENV NEXT_PUBLIC_USDC_MINT=$NEXT_PUBLIC_USDC_MINT
ENV NEXT_PUBLIC_PRESALE_PROGRAM_ID=$NEXT_PUBLIC_PRESALE_PROGRAM_ID
ENV NEXT_PUBLIC_STAKING_PROGRAM_ID=$NEXT_PUBLIC_STAKING_PROGRAM_ID
ENV NEXT_PUBLIC_VESTING_PROGRAM_ID=$NEXT_PUBLIC_VESTING_PROGRAM_ID
ENV NEXT_PUBLIC_DEMO_MODE=$NEXT_PUBLIC_DEMO_MODE
ENV NEXT_PUBLIC_APP_ENV=$NEXT_PUBLIC_APP_ENV
ENV NEXT_PUBLIC_PRESALE_START_TIME=$NEXT_PUBLIC_PRESALE_START_TIME
ENV NEXT_PUBLIC_PRESALE_END_TIME=$NEXT_PUBLIC_PRESALE_END_TIME
ENV NEXT_PUBLIC_PRESALE_HARD_CAP=$NEXT_PUBLIC_PRESALE_HARD_CAP
ENV NEXT_PUBLIC_MAX_PURCHASE_PER_WALLET=$NEXT_PUBLIC_MAX_PURCHASE_PER_WALLET
ENV NEXT_PUBLIC_MIN_SOL_PURCHASE=$NEXT_PUBLIC_MIN_SOL_PURCHASE
ENV NEXT_PUBLIC_FEE_RATE_BPS=$NEXT_PUBLIC_FEE_RATE_BPS
ENV NEXT_PUBLIC_PRESALE_STATE_PDA=$NEXT_PUBLIC_PRESALE_STATE_PDA
ENV NEXT_PUBLIC_TEST_WALLET_ADDRESS=$NEXT_PUBLIC_TEST_WALLET_ADDRESS

# Build the application with standalone output
RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create system user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy the built application
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public

# Create health check script
RUN echo '#!/bin/sh\ncurl -f http://localhost:3000/health || curl -f http://localhost:3000 || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh

# Set proper permissions
RUN chown -R nextjs:nodejs /app
USER nextjs

# Expose port 3000 (internal container port)
EXPOSE 3000

# Set environment variables for runtime
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD /app/healthcheck.sh

# Start the application with dumb-init for proper signal handling
CMD ["dumb-init", "node", "server.js"]

